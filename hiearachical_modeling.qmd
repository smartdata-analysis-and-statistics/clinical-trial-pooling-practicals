---
title: "Hierarchical Modeling"
format: html
---

# Scenario 1: Pooling Homogeneous Trials

In this example, we consider a scenario in which **all trials are homogeneous** — that is, they share similar designs, patient populations, and a consistent treatment effect.

## Simulating data

We simulate 5 trials, each with the following characteristics:

- 1:1 randomization between treatment and control arms  
- Patients drawn from the same underlying population  
- Identical baseline severity distribution across trials  
- A constant treatment effect with no variation across trials

```{r}
#| message: false
#| 
library(dplyr)
library(ggplot2)
source("R/simulate_trials.R")

# Simulate 5 trials with 100 patients each (50 per arm)
df <- simulate_trials(
  baseline_means = rep(25, 5) , # Common mean baseline
  trial_intercepts = rep(0,5), # No heterogeneity in outcome levels
  n_per_arm = 50,
  beta_W = 0,     # no within-trial effect modification
  beta_A = 0      # no across-trial effect modification
)
```

```{r}
#| message: false
#| echo: false
source("R/tables.R")

summarize_baseline_by_trial(df)
```

## Estimating the Pooled Treatment Effect

@fig-naive-pooling visualizes the relationship between baseline severity and change from baseline within each treatment arm using a naively pooled analysis.


```{r}
#| message: false
#| echo: false
#| fig-cap: "Observed Change from Baseline in Scenario 1"
#| label: fig-naive-pooling
#| fig-width: 10
#| fig-height: 8
source(file.path("R", "visualization.R"))
mean_labels <- df %>%
    group_by(trta) %>%
    summarise(mean_change = mean(change, na.rm = TRUE)) %>%
    mutate(label = paste0("Mean change: ", round(mean_change, 1)))
plot_change_by_treatment_with_means(df, title = "Change from Baseline by Treatment Group (Scenario 1)")
```

The plot shows that:

- The mean change in the active group is `r mean_labels %>% filter(trta == "Active") %>% pull(mean_change) %>% round(digits = 1)`
- The mean change in the control group is `r mean_labels %>% filter(trta == "Control") %>% pull(mean_change) %>% round(digits = 1)`

**Question for Discussion**: Can we interpret the pooled treatment effect as simply the difference in means?

### Naive Analysis

We begin by estimating the pooled treatment effect using a simple regression model that adjusts for baseline severity but ignores trial structure. This reflects a naive analysis:

```{r}
#| message: false
((fit_naive <- glm(outcome ~ trta + baseline, data = df)))
```

```{r}
#| echo: false
est_naive <- coef(fit_naive)["trtaActive"]
ci_naive  <- confint.default(fit_naive)["trtaActive", ]
```

In this naive model, the estimated treatment effect is: 

`r sprintf("Treatment effect: %.2f (95%% CI: %.2f to %.2f)", est_naive, ci_naive[1], ci_naive[2])`

The figure below visualizes `fit_naive` by showing predicted outcomes across baseline severity values for each treatment group, alongside the observed data.

```{r}
#| message: false
#| echo: false
#| fig-cap: "Model-Predicted and Observed Outcomes from Naive Pooled Analysis by Treatment Group"
#| label: fig-model-fit-naive
#| fig-width: 8
#| fig-height: 6

# Prepare new data for prediction
new_data <- expand.grid(
  baseline = seq(min(df$baseline), max(df$baseline), length.out = 100),
  trta = levels(df$trta)
)

# Get model predictions
new_data$pred <- predict(fit_naive, newdata = new_data)

# Plot: Observed outcomes and model-predicted lines by treatment
ggplot() +
  # Model prediction lines (same slope, treatment-specific intercepts)
  geom_line(data = new_data, aes(x = baseline, y = pred), color = "black", linewidth  = 1.2) +

  # Observed data points
  geom_point(data = df, aes(x = baseline, y = outcome), alpha = 0.4, color = "#B90066", size = 1.5) +

  # Horizontal line at 0
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray60") +

  # Facet by treatment
  facet_wrap(~trta) +

  # Labels
  labs(
  title = "Observed Outcomes and Model-Predicted Values by Treatment Group",
  subtitle = "Regression line reflects predictions from: outcome ~ treatment + baseline",
  x = "Baseline Severity",
  y = "Observed Outcome",
  caption = paste0(
    "Treatment effect (Active vs Placebo): ", round(coef(fit_naive)["trtaActive"], 2)
  )
)+


  # Theme
  theme_minimal() +
  theme(
    legend.position = "none",
    plot.caption = element_text(hjust = 0, size = 8, face = "italic")
  )

```

### Stratified Analysis by Trial

Next, we fit a stratified model that accounts for trial-specific intercepts by including trial as a fixed effect (without a global intercept).  This approach allows each trial to have its own baseline level of the outcome, effectively adjusting for differences in average outcomes across trials.

```{r}
#| message: false
((fit_stratified <- glm(outcome ~ -1 + trial + trta + baseline, data = df)))
```



```{r}
#| echo: false
est_stratified <- coef(fit_stratified)["trtaActive"]
ci_stratified  <- confint.default(fit_stratified)["trtaActive", ]

# Extract all coefficients related to trial intercepts
intercepts <- coef(fit_stratified)[grep("^trial", names(coef(fit_stratified)))]

# Get the minimum and maximum values
min_intercept <- min(intercepts)
max_intercept <- max(intercepts)
```

This model yields the following treatment effect estimate  (`trtaActive`), which is adjusted for trial-level differences and baseline covariates.

`r sprintf("Treatment effect: %.2f (95%% CI: %.2f to %.2f)", est_stratified, ci_stratified[1], ci_stratified[2])`

Note that all trial-specific intercepts are fairly similar (ranging from approximately `r round(min(intercepts),2)` to `r round(max(intercepts),2)`), which suggests there is no strong 'trial effect' in the data. This is consistent with how the data were simulated — the underlying outcome-generating mechanism assumed comparable average outcomes across trials, apart from random noise.

The homogeneity in trial-specific intercepts suggests that a naively pooled model with a global intercept could be reasonable in this scenario. However, this remains a strong assumption — even small differences across trials can introduce bias if not properly accounted for. Stratifying by trial offers a more robust approach by explicitly modeling these differences, even when they appear minor.

# Scenario 2: Pooling Trials with Study-Level differences

In this second scenario, we consider a setting in which trials differ in baseline severity and average outcome levels, as might occur when studies are conducted in distinct clinical environments or patient populations.

## Simulating data

In this scenario, we simulate five clinical trials that are identical in design and treatment effect. However, **Trial 5 differs systematically from the others**:

- It enrolls patients with **lower baseline severity** (mean = 17 vs. 25 in other trials)
- It also exhibits **reduced overall disease progression** due to an added **negative intercept shift** (−15) applied equally to both treatment arms

This setup reflects a situation where one study is conducted in a distinct clinical setting with less severely affected patients and a milder disease trajectory.

```{r}
#| message: false

# Simulate 5 trials with 100 patients each (50 per arm)
df <- simulate_trials(
  baseline_means = c(25,25,25,25,17), # Different mean baselines across trials
  trial_intercepts = c(0,0,0,0,-15),
  n_per_arm = 50,
  beta_W = 0,     # no within-trial effect modification
  beta_A = 0      # no across-trial effect modification
)
```


```{r}
#| message: false
#| echo: false
summarize_baseline_by_trial(df)
```


@fig-naive-pooling-scenario2 visualizes the relationship between baseline severity and change from baseline within each treatment arm using a naively pooled analysis.


```{r}
#| message: false
#| echo: false
#| fig-cap: "Observed Change from Baseline in Scenario 2. Trial 5 differs from the others by having systematically lower baseline severity (mean = 17) and lower outcome levels for both treatment and control groups due to an added intercept shift of −15."
#| label: fig-naive-pooling-scenario2
#| fig-width: 10
#| fig-height: 8
mean_labels <- df %>%
    group_by(trta) %>%
    summarise(mean_change = mean(change, na.rm = TRUE)) %>%
    mutate(label = paste0("Mean change: ", round(mean_change, 1)))
plot_change_by_treatment_with_means(df, title = "Change from Baseline by Treatment Group (Scenario 2)")
```

The plot shows that:

- The mean change in the active group is `r mean_labels %>% filter(trta == "Active") %>% pull(mean_change) %>% round(digits = 1)`
- The mean change in the control group is `r mean_labels %>% filter(trta == "Control") %>% pull(mean_change) %>% round(digits = 1)`

**Question for Discussion**: Can we interpret the pooled treatment effect as simply the difference in means?


### Naive Analysis

We again begin by estimating the pooled treatment effect using a simple regression model that adjusts for baseline severity but ignores trial structure. 

```{r}
#| message: false
fit_naive <- glm(outcome ~ trta + baseline, data = df)
```

```{r}
#| echo: false
est_naive <- coef(fit_naive)["trtaActive"]
ci_naive  <- confint.default(fit_naive)["trtaActive", ]
```

In this naive model, the estimated treatment effect is: 

`r sprintf("Treatment effect: %.2f (95%% CI: %.2f to %.2f)", est_naive, ci_naive[1], ci_naive[2])`

The figure below visualizes `fit_naive` by showing predicted outcomes across baseline severity values for each treatment group, alongside the observed data.

```{r}
#| message: false
#| echo: false
#| fig-cap: "Model-Predicted and Observed Outcomes from Naive Pooled Analysis by Treatment Group"
#| label: fig-model-fit-naive-scenario2
#| fig-width: 8
#| fig-height: 6

# Prepare new data for prediction
new_data <- expand.grid(
  baseline = seq(min(df$baseline), max(df$baseline), length.out = 100),
  trta = levels(df$trta)
)

# Get model predictions
new_data$pred <- predict(fit_naive, newdata = new_data)

# Plot: Observed outcomes and model-predicted lines by treatment
ggplot() +
  # Model prediction lines (same slope, treatment-specific intercepts)
  geom_line(data = new_data, aes(x = baseline, y = pred), color = "black", linewidth  = 1.2) +

  # Observed data points
  geom_point(data = df, aes(x = baseline, y = outcome, color = trial), alpha = 0.4, size = 1.5) +

  # Horizontal line at 0
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray60") +

  # Facet by treatment
  facet_wrap(~trta) +

  # Labels
  labs(
  title = "Observed Outcomes and Model-Predicted Values by Treatment Group",
  subtitle = "Regression line reflects predictions from: outcome ~ treatment + baseline",
  x = "Baseline Severity",
  y = "Observed Outcome",
  caption = paste0(
    "Treatment effect (Active vs Placebo): ", round(coef(fit_naive)["trtaActive"], 2)
  )
)+


  # Theme
  theme_minimal() +
  theme(
    legend.position = "none",
    plot.caption = element_text(hjust = 0, size = 8, face = "italic")
  )

```

### Stratified Analysis by Trial

Next, we fit a stratified model that accounts for trial-specific intercepts by including trial as a fixed effect (without a global intercept).  This approach allows each trial to have its own baseline level of the outcome, effectively adjusting for differences in average outcomes across trials.

```{r}
#| message: false
((fit_stratified <- glm(outcome ~ -1 + trial + trta + baseline, data = df)))
```



```{r}
#| echo: false
est_stratified <- coef(fit_stratified)["trtaActive"]
ci_stratified  <- confint.default(fit_stratified)["trtaActive", ]

# Extract all coefficients related to trial intercepts
intercepts <- coef(fit_stratified)[grep("^trial", names(coef(fit_stratified)))]

# Get the minimum and maximum values
min_intercept <- min(intercepts)
max_intercept <- max(intercepts)
```

This model yields the following treatment effect estimate  (`trtaActive`), which is adjusted for trial-level differences and baseline covariates.

`r sprintf("Treatment effect: %.2f (95%% CI: %.2f to %.2f)", est_stratified, ci_stratified[1], ci_stratified[2])`

Note that all trial-specific intercepts are fairly similar (ranging from approximately `r round(min(intercepts),2)` to `r round(max(intercepts),2)`), which suggests there is no strong 'trial effect' in the data. This is consistent with how the data were simulated — the underlying outcome-generating mechanism assumed comparable average outcomes across trials, apart from random noise.

The homogeneity in trial-specific intercepts suggests that a naively pooled model with a global intercept could be reasonable in this scenario. However, this remains a strong assumption — even small differences across trials can introduce bias if not properly accounted for. Stratifying by trial offers a more robust approach by explicitly modeling these differences, even when they appear minor.


```{r}
#| message: false
#| echo: false
#| fig-cap: "Model-Predicted and Observed Outcomes from Stratified Analysis by Treatment Group"
#| label: fig-model-fit-stratified
#| fig-width: 8
#| fig-height: 6

# Prepare new data for prediction
new_data_strat <- expand.grid(
  baseline = seq(min(df$baseline), max(df$baseline), length.out = 100),
  trta = levels(df$trta),
  trial = unique(df$trial)
)

# Get model predictions
new_data_strat$pred <- predict(fit_stratified, newdata = new_data_strat)

# Plot: Observed outcomes and model-predicted lines by treatment
ggplot() +
  # Model prediction lines (trial-stratified intercepts, shared slope & treatment effect)
  geom_line(data = new_data_strat, aes(x = baseline, y = pred, group = trial), color = "black", linewidth = 1.2) +

  # Observed data points colored by trial
  geom_point(data = df, aes(x = baseline, y = outcome, color = trial), alpha = 0.5, size = 1.5) +

  # Horizontal reference line
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray60") +

  # Facet by treatment group
  facet_wrap(~trta) +

  # Labels
  labs(
    title = "Observed Outcomes and Model-Predicted Values by Treatment Group (Stratified Model)",
    subtitle = "Regression line reflects predictions from: outcome ~ trial + treatment + baseline",
    x = "Baseline Severity",
    y = "Observed Outcome"
  ) +

  # Theme
  theme_minimal() +
  theme(
    plot.caption = element_text(hjust = 0, size = 8, face = "italic"),
    legend.position = "bottom"
  )
```


### Random trial effects



